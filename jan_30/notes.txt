Object Creation :-
    . "Class" is a "Blueprint/Design" that is used by the JVM to create an object.
    . "new" keyword is used to create the objects.
    . All objects and corresponding instance variables(as part of object), are created in the Heap area.

Types of Variables :-
    - Based on the behaviour and position of declaration all variables are divided into the 
        following 3 types :-
        1. Instance Variables :
            . If the value of a variable is varied from object to object such types of variables 
                are called instance variables.
            . They are created at the time of object creation and destroyed at the time of 
                object destruction.
            . The Scope of instance variable is same as the scope of the objects.
            . Instance variables will be stored on the "Heap" as part of the object.
            . Should be declared within the class directly but outside of any method/block/constructor.
            . Instance variables can be accessed directly from the Instance area. But cannot 
                be accessed directly from a static area.
            . But by using object reference we can access instance variables from static area.
        2. Static Variables
        3. Local variables :
            . It is stored inside the stack.
            . The local variables will be created as part of the block execution in which it is 
                declared and destroyed once that block execution completes. 
            . Hence the scope of the local variables is exactly the same as the scope of 
                the block in which we declared.
            . For the local variables JVM won't provide any default values, we should perform 
                initialization explicitly before using that variable.
            . It is never recommended to perform initialization for the local variables inside 
                logical blocks because there is no guarantee of executing that block always at runtime.
            . It is highly recommended to perform initialization for the local variables at the 
                time of declaration at least with default values.
                eg :- 
                1.  class Test {
                        public static void main(String[] args) {
                            int x;
                            System.out.println("hello");        // hello
                        }
                    }
                2.  class Test {
                        public static void main(String[] args) {
                            int x;
                            System.out.println(x);              // CE
                        }
                    }
                3.  class Test {
                        public static void main(String[] args) {
                            int x;
                            if(args.length>0) {
                                x=10;
                            }
                            System.out.println(x);              // CE
                        }
                    }
                4.  class Test {
                        public static void main(String[] args) {
                            int x;
                            if(args.length>0) {
                                x=10;
                            } else {
                                x = 20;
                            }
                                System.out.println(x);          // 20
                        }
                    }
            . The only applicable "modifier" for "local variables" is "final". If we are using 
                any other moifier we will get a compile time error.

Method Overloading :-
    . Two methods are said to be overloaded if and only if both have the same name but different argument
        types.
    . In the 'C' language we can't take 2 methods with the same name and different types. 
        If there is a change in argument type compulsory we should go for a new method name.
    . Having overloading concept in java reduces complexity of the programming.

    Automatic promotion in overloading :-
        . In overloading if the compiler is unable to find the method with exact match we won't 
            get any compile time error immediately.
        . First the compiler promotes the argument to the next level and checks whether the 
            matched method is available or not if it is available then that method will be considered
            if it is not available then the compiler promotes the argument once again to the next level.
        . This process will be continued until all possible promotions still if the 
            matched method is not available then we will get a compile time error.
        
        byte --> short --|
                         | --> int --> long --> float --> double.
                 char ---|
        
                                          { 
                                             Here, if we have more than 1 option as - 
        StringBuilder -->|                   1st option = Object, 2nd option = (any of the three classses)
                String---|---> Object        then we wont get any "ambiguity".
        StringBuffer -->|                  but, 
                                             if we have more than 1 option among the three string types
                                             it will give "ambiguity" 
                                          }

                |---> StringBuffer
        null ---|---> String                    { It throws an CE as "ambiguity" if more than 1 
                |---> StringBuilder                     of given option is available. }

        * if none of the string type is there but "Object" type method is there
                then it will get promoted to Object.
        * While resolving overloaded methods, 
                exact matches will always get high priority.
                the child class will get more priority than the parent class.
            So,
                if there is "String" and "Object" available and none are exact match then 
                "child class String" is preferred. same is the case with all types.
                    
        Ambiguity :-
            . class GFG {
                        // Method that accepts integer and double
                public static void method(int i, double d) {
                    System.out.println("Integer-Double");
                }
                        // Method that accepts double and integer
                public static void method(double d, int i) {
                    System.out.println("Double-Integer");
                }
                public static void main(String[] args) {
                    // method call by passing integer and double
                    method(2, 2.0);             // "Integer-Double"
                    // method call by passing double and integer
                    method(2.0, 2);             // "Double-Integer"
                    // method call by passing both integers
                    // method(2, 2);            // Ambiguous error
                }
            }
        - Here there are 2 methods that accept an integer and double and any of the 
            integers can be promoted to double simply, but the problem is ambiguity. 
        - The compiler didnâ€™t know what method to call if the type was promoted. 
            So compiler throws an error message at time of compilation.
            eg :-
            1.  class Test {
                    public void m1(String s){
                        System.out.println("String arg method");
                    }
                    public void m1(Object d){
                        System.out.println("Object arg method");
                    }
                    public static void main(String[] args) {
                        Test t = new Test();
                        t.m1("sachin");                 // "String arg method"
                        t.m1(new Object());             // "Object arg method"
                        t.m1(null);                     // "String arg method"
                    }
                }
            2.  class Test {
                    public void m1(int i){
                        System.out.println("int arg method");
                    }
                    public void m1(float d){
                        System.out.println("float arg method");
                    }
                    public static void main(String[] args) {
                        Test t = new Test();
                        t.m1('a');                      // "int arg method"
                        t.m1(10l);                      // "float arg method"
                        t.m1(10.5);                     // CE
                    }
                }
            3.  class Test {
                    public void m1(String s){
                        System.out.println("String arg method");
                    }
                    public void m1(StringBuffer d){
                        System.out.println("StringBuffer arg method");
                    }
                    public static void main(String[] args) {
                        Test t = new Test();
                        t.m1("sachin");                     // "String arg method"
                        t.m1(new StringBuffer("dhoni"));    // "StringBuffer arg method"
                        t.m1(null);                         // CE (Ambiguity)
                    }
                }