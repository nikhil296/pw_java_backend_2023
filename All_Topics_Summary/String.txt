. String class is present in the "java.lang.String" package.
. we don't need to import the "java.lang" package in our program as we can directly use it.
. String - in java is an "object" hence it is also stored in "Heap Memory".
. The memory for value of String objects is allocated in the heap area, but the 
    reference to those objects/object values are still in the stack area.
    by reference here we mean the variables pointing to those string objects.
. Whenever we use any "inbuilt" string method or the "new" keyword or "reference" to any other string, 
    the string object is allocated memory outside the SCP but in heap area.

. "String Constant Pool" :-
    - String Pool in Java is a special storage space in Java Heap memory where string literals are stored.
     It is also known by the names - "String Constant Pool" or "String Intern Pool". 
     Whenever a string literal is created, the JVM first checks the String Constant Pool 
     before creating a new String object corresponding to it.

    Need of String Constant Pool :-
        . When we create a String object, it uses some amount of space in the heap memory.
        . Let's say we are creating 'n' number of String objects with the same value, 
            and distinct memory is allocated to each of these string objects 
            (though they all contain the same string).
        . This is an inefficient usage of heap memory. In order to escalate the performance of 
            our code and reduce memory usage, JVM optimizes the way in which strings are stored with 
            the help of a string constant pool.

    Advantages of String Pool in Java :-
        1. Java String Pool allows "caching" of string. 
            Caching here is the process of storing data in a cache. Cache improves performance 
            and reduces memory usage.
        2. Provides "reusability" : It saves time to create a new string if there is already a 
            string with the same value present in the pool. The old string is reused, 
            and its reference is returned.

    Why did the String pool move from "PermGen" to the "normal heap area" ? 
        . PermGen space is limited, the default size is just 64 MB. it was a problem with creating 
            and storing too many string objects in PermGen space. That’s why the String pool 
            was moved to a larger heap area.
    
    Garbage Collection in SCP :-
        . Garbage Collector cannot access SCP Area, Even thosgh Object does not have any reference 
            still object is not eligible for GC.
        . All SCP objects will be destroyed only at the time of JVM ShutDown.

. Ways to Create Strings :-
    1. String literal
    2. Using new keyword :
        => String x = new String("Nikhil");
            - here the string object memory is allocated in heap area but outside the String constant pool.
            - but a copy of this string is also created in the String Constant Pool for internal reference.
            - the reference will always point to Heap.
    3. Using String.intern() method :
        => In this method, First the String object is created(outside String Poll) then the JVM 
            looks for the string value in string pool if the value is already present in the pool
            then the reference to String Pool value/object is returned
            otherwise,
            the String created string object (outside the pool) is actually 
            added to the string pool.

. Types of Sting Object in java :-
    1. Mutable (can be modified) :
            - Once if we create a String, on that String if we try to perform any operation and if those 
                changes get reflected in the same oblect then such strings are called “Mutable String”.
                Example : StringBuffer, StringBuilder.
    2. Immutable (cannot be modified) :
            - In java String object is by default immutable, meaning once the object is created we cannot
                change the value of the object, if we try to change then those changes will be
                reflected on the new object not on the existing object.
            - example
                String name = "Data";
                    // the above string object is created in the "String Pool" in the heap area.
                    // this type of String object doesn't allows duplication.
                        eg :- String name1 = "nikhil";
                              String name2 = "nikhil";
                              . the 2 variables here actually point to same memory address
                              inside the "String memory Pool".
                              . this is why (name1 == name2) => "True"
                              bcz in this method no matter how many variables we create,
                              if the value is same no new memory will get allocated
                              instead each variable will point to same address.

                String name = new String("Nikhil");
                                or
                Char ch = {'a', 'b', 'c', 'd'};
                String name = new String(ch);
                    // the above String object is created in the heap area too, but outside the 
                        string pool.
                    // this type of string object allows duplication.
                        eg :- String name1 = new String("Nikhil");
                              String name2 = new String("Nikhil");
                              . there will be 2 different memory address allocated for the 2 diff
                              variables eventhough they both have same value.
                              . this is the reason why (name1 == name2) gives => "False"  
                              . but (name1.equals(name2)) => "True"
            - String class Constructor :
                1. String s = new String();
                    - Creates an Empty String Object.
                2. String s = new String(String literals);
                    - Creates an Object with String literals on Heap.
                3. String s = new String(StringBuffer sb)
                    - Creates an equivalent String Object for StringBuffer.
                4. String s = new String(char[] ch)
                    - Creates an equivalent String Object for Character array.
                        eg :    char[] ch = {'a','b','c'} ;
                                String s = new String(ch);
                                System.out.println(s); // "abc"
                5. String s = new String(byte[] b)
                    - Creates an equivalent String Object for byte array.
                        eg :    byte[] b = {100,101,102};
                                String s = new String(b);
                                System.out.println(s); // "def"  
                        {the byte value are treated as Ascii and gets converted to char counterparts.}