Tricky Questios :-
    Rule :-
        If we want to specify the dimension, we need to specify that before the first variable, but
        from the second variable onwards rule is not applicable.

        . int[] a,b;        // a2 -> 1D, b2 -> 1D
        . int[][] a,b;      // a2 -> 2D, b2 -> 1D
        . int[] a[],b;      // a2 -> 2D, b2 -> 1D
        . int[] a[],[]b;    // CE
        . int[] []a,b;      // a -> 2D, b -> 1D
        . int a[], b;       // a -> 1D, b -> int variable.
        . int []c, d;       // a -> 1D, d -> 1D

What is an ARRAY ?
    - It refers to index collection of fixed no of homogeneous data elements.
      Single variable holding multiple values which improves readability of the program.

Array Contruction :-
    - Every array in java is an object hence we create using a new operator.
    - int a[] = {10, 20, 30};
    - int a[] = new int[10];
    - int a[]; a = new int[5];
    - int b[][] = new int[3][]; b[0] = new int[4]; b[1] = new int[2]; b[2] = new int[5];

    - It is legal to have an array with size zero.
        Example :
            int[] a = new int[0];
            System.out.println(a.length);       // 0
    - If we declare an array with negative size it would result in a Negative Array size exception.
        Example :
            int[] a = new int[-5]; // NegativeArraySizeException.

    - The allowed datatypes to specify the size are [ byte, short, int, char ]
        Example :
            int[] a = new int[5];
            byte b = 10;
            int[] a = new int[b];        // valid
            short s = 25;
            int[] a = new int[s];        // valid
            char c = 'A';
            int[] a = new int[c];         // valid
            int[] a = new int[10L];       // CE
            int[] a = new int[3.5f];      // CE

Array Initialization :-
    - Since arrays are treated as objects, internally based on the type of data we keep 
        inside array JVM will keep default values.
        Example :
            int[] a = new int[5];
            System.out.println(a[0]);       // 0 (default integer value).

            int[] a = new int[4];
            a[0] = 10; a[1] = 20; a[2] = 30;
            System.out.println(a[3]);       // 0 (default integer value).
            System.out.println(a[4]);       // ArrayIndexOutOfBoundsException.
            System.out.println(a[-4]);      // ArrayIndexOutOfBoundsException.

Array Element assignment :-
    CASE 1 :
        - In case of primitive array as an array element any type is allowed which can be
            promoted to declared type.

        int[] a = new int[10];
            a[0] = 97;
            a[1] = 'a';         // valid
        byte b = 10;        
            a[2] = b;           // valid
        short s=25;
            a[3]=s;             // valid
        a[4]=10L;               // CE (compile time error): possible loss of precession

    CASE 2 :
        - In case of Object type array as an array elements we can provide either declared type
            object or its child class objects.

        Object[] obj = new Object[5];
        obj[0] = new Object();          // valid
        obj[1] = new Integer(10);       // valid
        obj[2] = new String("sachin");  // valid

    CASE 3 :
        - In case of interface type array as an array element we can provide its "implementation
            class Object".

        Runnable[] r = new Runnable[5]; // valid
        r[0] = new Thread("sachin");    // valid
        r[1] = new String("dhoni");     // CE (compile time error)

Array Variable assignment :-
    CASE 1 :
        - Element level type promotion is not applicable
            Example :
                char value can be type promoted to int, but char[] can't be type promoted to int[].

                int[] a = {1,2,3};           
                char[] c ={'a','b','c'};
                int[] b = a;
                int[] a = c;        // invalid

    CASE 2 :
        - In case of an Object type array,its child type array can be assigned.
            Example :
                String[] names = {"sachin","saurav","dhoni"};
                Object[] obj = names;

                + int[] => int[]         // valid
                + char[] => int[]        // invalid
                + int => long            // valid
                + int[] => long[]        // invalid
                + char => int            // valid
                + char[] => int[]        // invalid
                + String => Object       // valid
                + String[] => Object[]   // valid

    CASE 3 :
        - Whenever we are copying the array, its reference will be copied but we should match 
            it with the array dimension and its type, otherwise it would result 
            in compile time error.

            Example :
                int[][] a = {{10},{20},{30}};
                int[] b = {100,200,300};
                b= a;           // CE: incompatible type

                int a[] = {10, 20, 30};
                int b[] = {50, 60};
                b = a;          // valid
                int c[] = new int[1];
                c = a;          // valid
