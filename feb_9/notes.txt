Need of Encapsulation :-
    . To the outside world, the data should not be exposed directly.
    . In order to provide the controlled access, we need to use “Encapsulation”.

What is Encapsulation :-
    . Binding of data and corresponding methods into a single unit called class is 
        called encapsulation.
    . If any java class follows data hiding and abstraction then such class is referred as
        "Encapsulated class".
        "Encapsulation = Data Hiding + abstraction"
    . Another way to think about encapsulation is, that it is a protective shield that prevents 
        the data from being accessed by the code outside this shield.

How to achieve encapsulation :-
    . Every data member inside the class should be declared as private, and to access this
        private data we need to have setter and getter methods.
    . By using private modifiers we can implement "Data Hiding".
    . By using getters and setters we implement "Abstraction" as the class is exposed to 
        the end-user or the world without providing any details behind implementation.

        "Encapsulation = Data Hiding + abstraction"

Advantages of encapsulation :-
    . Data Hiding : 
            . It is a way of restricting the access of our data members by hiding the 
                implementation details.
            . We can achieve security.
    . Maintability and Modularization becomes easy :
            . As encapsulation makes it easier to change the implementation without affecting other 
                parts of the code.
    . Increased Flexibility : 
            . It provides flexibility to the the user to use the system very easily.
            . We can make the variables of the class read-only or write-only depending on our 
                requirement. If we wish to make the variables read-only then we have to omit the 
                setter methods like setName(), setAge(), etc. or if we wish to make the variables 
                write-only then we have to omit the get methods like getName(), getAge(), etc.
    . Testing code is easy : 
            . Encapsulated code is easy to test for unit testing.
    . Reusability: 
            . Encapsulation also improves the re-usability and is easy to change with new requirements.
            . Enhancement becomes easy.
    . Encapsulation Allow the state of an object to be accessed and modified through behaviors.
        Reduce the "coupling" of modules and increase the "cohesion" inside them.

Disadvantages of encapsulation :-
    . Can lead to increased complexity, especially if not used properly.
    . Can make it more difficult to understand how the system works.
    . May limit the flexibility of the implementation.

Setters and Getters :-
    1. Setters :
        a. compulsory the method name should start with "set".
        b. it should be "public".
        c. return type should be "void".
        d. compulsorily it should have some argument.
    2. Getters :
        a. compulsory the method name should start with "get".
        b. it should be "public".
        c. return type should "not be void".
        d. compulsorily it should "not have any argument".

Shadowing Problem and "this" keyword :-
    . If both local variable and instance variable have the same name inside the method then it would
        result in a name-clash and jvm will always give preference for local variable.
    eg :- 
        class Student {
            private String name;
            private Integer id;
            private String address;
            Student(String name, Integer id, String address) {
                name = name;
                id = id;
                address = address;
            }
            public void display() {
                System.out.println("Name is :: " +name);
                System.out.println("Id is :: " +id);
                System.out.println("Address is :: " +address);
            }
        }
        public class Demo {
            public static void main(String[] args) {
                Student std = new Student("sachin", 10, "MI”);
                std.display();
            }
        }
        OUTPUT :
            Name is :: null
            Id is :: 0
            Address is :: null

    * To avoid above problem we use "this" keyword.
    eg:-
        class Student {
            private String name;
            private Integer id;
            private String address;
            Student(String name,Integer id, String address) {
                this.name = name;
                this.id = id;
                this.address = address;
            }
            public void display() {
                System.out.println("Name is :: "+name);
                System.out.println("Id is :: "+id);
                System.out.println("Address is :: "+address);
            }
        }
        class Demo {
            public static void main(String[] args) {
                Student std = new Student("sachin",10,"MI”);
                std.display();
            }
        }

"this" Keyword :-
    . The this keyword refers to the current object in a method or constructor.
    . The most common use of the this keyword is to eliminate the confusion between 
        class attributes and parameters with the same name,
        (because a class attribute is shadowed by a method or constructor parameter).
